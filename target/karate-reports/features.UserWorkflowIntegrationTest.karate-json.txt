{"failedCount":0,"prefixedPath":"classpath:features\/UserWorkflowIntegrationTest.feature","packageQualifiedName":"features.UserWorkflowIntegrationTest","loopIndex":-1,"relativePath":"features\/UserWorkflowIntegrationTest.feature","scenarioResults":[{"sectionIndex":0,"stepResults":[{"result":{"nanos":39709,"millis":0.039709,"status":"passed"},"step":{"background":true,"line":4,"prefix":"*","index":0,"text":"url 'https:\/\/jsonplaceholder.typicode.com'"}},{"result":{"nanos":249917,"millis":0.249917,"status":"passed"},"step":{"comments":["# Step 1: Retrieve a user with ID 1"],"line":9,"prefix":"Given","index":0,"text":"path 'users', 1"}},{"result":{"nanos":737288000,"millis":737.288,"status":"passed"},"step":{"line":10,"prefix":"When","index":1,"text":"method GET"}},{"result":{"nanos":11375,"millis":0.011375,"status":"passed"},"step":{"line":11,"prefix":"Then","index":2,"text":"status 200"}},{"result":{"nanos":718167,"millis":0.718167,"status":"passed"},"step":{"line":12,"prefix":"And","index":3,"text":"match response.id == 1"}},{"result":{"nanos":315500,"millis":0.3155,"status":"passed"},"step":{"line":13,"prefix":"And","index":4,"text":"match response.username == 'Bret'"}},{"result":{"nanos":1145375,"millis":1.145375,"status":"passed"},"step":{"line":14,"prefix":"*","index":5,"text":"def userId = response.id"}},{"result":{"nanos":39083,"millis":0.039083,"status":"passed"},"step":{"comments":["# Comment: Fetches an existing user with ID 1 and saves the user ID for future requests.","# Assertion: Checks that the response ID is 1 and username is 'Bret' to confirm expected data.","# Step 2: Create a new post (simulated; won't actually persist)"],"line":19,"prefix":"Given","index":6,"text":"path 'posts'"}},{"result":{"nanos":1672625,"millis":1.672625,"status":"passed"},"step":{"line":20,"prefix":"And","index":7,"text":"request { userId: '#(userId)', title: 'Sample Post', body: 'Temporary content for testing.' }"}},{"result":{"nanos":1032509125,"millis":1032.509125,"status":"passed"},"step":{"line":21,"prefix":"When","index":8,"text":"method POST"}},{"result":{"nanos":21250,"millis":0.02125,"status":"passed"},"step":{"line":22,"prefix":"Then","index":9,"text":"status 201"}},{"result":{"nanos":1430208,"millis":1.430208,"status":"passed"},"step":{"line":23,"prefix":"And","index":10,"text":"match response.userId == userId"}},{"result":{"nanos":1457833,"millis":1.457833,"status":"passed"},"step":{"line":24,"prefix":"And","index":11,"text":"match response.title == 'Sample Post'"}},{"result":{"nanos":706291,"millis":0.706291,"status":"passed"},"step":{"line":25,"prefix":"And","index":12,"text":"match response.body == 'Temporary content for testing.'"}},{"result":{"nanos":574292,"millis":0.574292,"status":"passed"},"step":{"line":26,"prefix":"*","index":13,"text":"def postId = 1"}},{"result":{"nanos":4857000,"millis":4.857,"status":"passed"},"step":{"comments":["# Comment: Simulates creation of a new post for the retrieved user.","# Assertions: Verifies that the response includes the correct user ID, title, and body.","# Note: Sets postId = 1 for continuity due to JSONPlaceholder\u2019s lack of actual data persistence.","# Step 3: Retrieve an existing post with ID 1 to simulate getting a newly created post"],"line":32,"prefix":"Given","index":14,"text":"path 'posts', postId"}},{"result":{"nanos":808598042,"millis":808.598042,"status":"passed"},"step":{"line":33,"prefix":"When","index":15,"text":"method GET"}},{"result":{"nanos":15333,"millis":0.015333,"status":"passed"},"step":{"line":34,"prefix":"Then","index":16,"text":"status 200"}},{"result":{"nanos":811708,"millis":0.811708,"status":"passed"},"step":{"line":35,"prefix":"And","index":17,"text":"match response.id == postId"}},{"result":{"nanos":277750,"millis":0.27775,"status":"passed"},"step":{"line":36,"prefix":"And","index":18,"text":"match response.userId == userId"}},{"result":{"nanos":318042,"millis":0.318042,"status":"passed"},"step":{"comments":["# Comment: Simulates retrieving the previously \"created\" post by its ID. Skips matching `title` due to API limitations.","# Assertions: Only checks that the ID and userId are correct since JSONPlaceholder doesn\u2019t retain post changes.","# Step 4: Update the title of an existing post with ID 1"],"line":41,"prefix":"Given","index":19,"text":"path 'posts', postId"}},{"result":{"nanos":278000,"millis":0.278,"status":"passed"},"step":{"line":42,"prefix":"And","index":20,"text":"request { title: 'Updated Sample Post' }"}},{"result":{"nanos":1416401500,"millis":1416.4015,"status":"passed"},"step":{"line":43,"prefix":"When","index":21,"text":"method PATCH"}},{"result":{"nanos":23541,"millis":0.023541,"status":"passed"},"step":{"line":44,"prefix":"Then","index":22,"text":"status 200"}},{"result":{"nanos":1924750,"millis":1.92475,"status":"passed"},"step":{"line":45,"prefix":"And","index":23,"text":"match response.title == 'Updated Sample Post'"}},{"result":{"nanos":364458,"millis":0.364458,"status":"passed"},"step":{"line":46,"prefix":"And","index":24,"text":"match response.userId == userId"}},{"result":{"nanos":186208,"millis":0.186208,"status":"passed"},"step":{"line":47,"prefix":"And","index":25,"text":"match response.id == postId"}},{"result":{"nanos":328875,"millis":0.328875,"status":"passed"},"step":{"comments":["# Comment: Simulates updating the post\u2019s title to a new value.","# Assertions: Verifies that the title has been updated while userId and postId remain unchanged.","# Step 5: \"Delete\" the post with ID 1"],"line":52,"prefix":"Given","index":26,"text":"path 'posts', postId"}},{"result":{"nanos":983205792,"millis":983.205792,"status":"passed"},"step":{"line":53,"prefix":"When","index":27,"text":"method DELETE"}},{"result":{"nanos":15208,"millis":0.015208,"status":"passed"},"step":{"line":54,"prefix":"Then","index":28,"text":"status 200"}},{"result":{"nanos":1243375,"millis":1.243375,"status":"passed"},"step":{"comments":["# Comment: Simulates deleting the post.","# Assertion: Checks for a successful 200 response, acknowledging JSONPlaceholder's lack of actual data deletion.","# Step 6: Attempt to retrieve the post with ID 1 and expect status 200 due to persistence limitation"],"line":59,"prefix":"Given","index":29,"text":"path 'posts', postId"}},{"result":{"nanos":768462792,"millis":768.462792,"status":"passed"},"step":{"line":60,"prefix":"When","index":30,"text":"method GET"}},{"result":{"nanos":19708,"millis":0.019708,"status":"passed"},"step":{"line":61,"prefix":"Then","index":31,"text":"status 200"}},{"result":{"nanos":707375,"millis":0.707375,"status":"passed"},"step":{"line":62,"prefix":"And","index":32,"text":"match response.id == postId"}},{"result":{"nanos":189125,"millis":0.189125,"status":"passed"},"step":{"line":63,"prefix":"And","index":33,"text":"match response.userId == userId"}}],"executorName":"main","line":6,"name":"Workflow with Linked Actions","description":"","durationMillis":5766.407332,"startTime":1732154998797,"failed":false,"refId":"[1:6]","endTime":1732155004566,"exampleIndex":-1}],"callDepth":0,"name":"Simulated Connected Workflow with JSONPlaceholder","description":"","resultDate":"2024-11-21 01:10:04 pm","durationMillis":5766.407332,"passedCount":1}